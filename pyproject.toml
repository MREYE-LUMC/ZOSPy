[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "zospy"
authors = [
    {name = "Luc van Vught"},
    {name = "Jan-Willem Beenakker"},
    {name = "CornÃ© Haasjes"}
]
maintainers = [
    {name = "MReye research group", email = "zospy@mreye.nl"}
]

description = "A Python package used to communicate with Zemax OpticStudio through the API"
readme = "README.md"
license = {file = "LICENSE.txt"}
keywords = ["Zemax", "OpticStudio", "API", "ZOSAPI"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Typing :: Typed"
]
requires-python = ">=3.9,<3.13"
dependencies = [
    "lark ~= 1.2.0",
    "pythonnet >=3.0.0,<4",
    "pandas",
    "pydantic >= 2.4.0",
    "numpy",
    "semver >= 3.0.0,<4",
    "eval_type_backport", # TODO: Remove when dropping support for Python 3.9
]
dynamic = ["version"]

[project.urls]
Source = "https://github.com/MREYE-LUMC/ZOSPy"
Documentation = "https://mreye-lumc.github.io/ZOSPy"

#[project.optional-dependencies]
## Dependencies for unit testing
#test = [
#    "pytest",
#    "tox",
#]
#
## Development tools
#dev = [
#    "zospy[test]",
#    "black[jupyter] == 23.3.0",
#    "isort",
#    "pydantic ~= 2.0.0",
#    "ruff",
#]

### Hatch configuration

[tool.hatch.version]
path = "zospy/__init__.py"

[tool.hatch.envs.default]
python = "3.12"
installer = "uv"

[tool.hatch.envs.default.scripts]
test-extension = "hatch test --extension {args}"
docs = [
    "hatch run docs:build",
    "hatch run docs:serve"
]
example = "{env:HATCH_UV:uv} run scripts/run_examples/run_single_example.py {args}"
all-examples = "{env:HATCH_UV:uv} run --isolated scripts/run_examples/run_all_examples.py {args:examples}"
file-exists = "python -c \"from pathlib import Path; p = Path(r'{args}'); print(p); print(p.exists())\""

# Generate reference data for unit tests
generate_reference_data = "hatch run reference-data:generate"

## Unit testing using hatch test
[tool.hatch.envs.hatch-test]
randomize = false
retries = 0

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.13", "3.12", "3.11", "3.10", "3.9"]

#[tool.hatch.envs.test.scripts]
## Run tests in extension mode
#extension = "pytest tests --extension {args}"
## Run tests in standalone mode
#standalone = "pytest tests --standalone {args}"
## Run zpcore tests in standalone mode with legacy connection code
#legacy = "pytest tests/test_zpcore.py --legacy-connection-setup {args}"
## Full test suite
#full = [
#    "standalone",
#    "legacy",
#    "coverage"
#]

## Documentation
[tool.hatch.envs.docs]
installer = "uv"
dependencies = [
    "ipython",
    "myst-parser",
    "nbsphinx",
    "numpydoc",
    "sphinx",
    "sphinx-book-theme",
    "sphinx-design",
]

[tool.hatch.envs.docs.scripts]
# Build documentation; run as hatch run docs:build
build = "sphinx-build -M {args:html} ./docs ./docs/_build"
# Serve documentation locally; run as hatch run docs:serve
serve = "python -m http.server -d ./docs/_build/html {args:8888}"

## Test reference data generation
[tool.hatch.envs.reference-data]
dependencies = ["pyyaml"]

[tool.hatch.envs.reference-data.scripts]
generate = "python scripts/generate_test_reference_data"

## Formatting using hatch fmt
[tool.hatch.envs.hatch-static-analysis]
config-path = "ruff_defaults.toml"
#dependencies = ["ruff", "numpydoc"]
#
#[tool.hatch.envs.hatch-static-analysis.scripts]
#lint-check = [
##    "ruff check{env:HATCH_FMT_ARGS:} {args:.}",
#    "numpydoc lint {args:.}"
#]
#lint-fix = [
##    "ruff check{env:HATCH_FMT_ARGS:} {args:.}",
#    "numpydoc lint {args:.}"
#]

# Linting and formatting options
[tool.ruff]
extend = "ruff_defaults.toml"

line-length = 120
exclude = [
    "zospy/api/_ZOSAPI",
    "zospy/api/_ZOSAPI_constants"
]

[tool.ruff.lint]
extend-select = [
    "D", # pydocstyle
    "NPY", # numpy-specific
]
extend-ignore = [
    "B028",
    "EM101",
    "EM102",
    "G004",
    "TD004",
    "TRY003"
]

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/**" = [
    "D", # pydocstyle
]
"scripts/**" = [
    "D", # pydocstyle
]
"docs/conf.py" = [
    "INP001", # Missing __init__.py
    "D100", # Missing docstring in public module
    "D103", # Missing docstring in public function
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pydocstringformatter]
write = true
style = "numpydoc"
linewrap-full-docstring = true

[tool.pytest.ini_options]
markers = [
    "must_pass: test must pass, otherwise all other tests will be skipped",
    "require_mode: requires the specified connection mode, otherwise the test will be skipped",
    "xfail_for_opticstudio_versions: test is expected to fail for specific OpticStudio versions"
]

[tool.mypy]
files = [
    "zospy"
]
pretty = true

[[tool.mypy.overrides]]
module = [
    "zospy.api._ZOSAPI",
    "zospy.api._ZOSAPI_constants"
]
ignore_errors = "True"
