"""This file provides autocompletions for the ZOS-API and was automatically generated.
It should not be edited manually.
"""

from typing import overload

from zospy.api.stubs._ZOSAPI.Tools import ISystemTool
from zospy.api.stubs._ZOSAPI.Tools.General import RayPatternType
from zospy.api.stubs._ZOSAPI.Tools.Layouts import (
    BackgroundOptions,
    BrightnessOptions,
    CameraViewpointOptions,
    ColorRaysByCrossSectionOptions,
    ColorRaysByNSCOptions,
    ColorRaysByOptions,
    DetectorDisplayModeOptions,
    DetectorPixelColorOptions,
    DrawSectionOptions,
    IImageExportData,
    IImagePixel,
    LineThicknessOptions,
    NumberSegmentsOptions,
    OpacityOptions,
    RayTraceOptions,
    RealPupilOptions,
)

from zospy.api.stubs._ZOSAPI_constants.Tools.Layouts import (
    BackgroundOptions,
    BrightnessOptions,
    CameraViewpointOptions,
    ColorRaysByCrossSectionOptions,
    ColorRaysByNSCOptions,
    ColorRaysByOptions,
    DetectorDisplayModeOptions,
    DetectorPixelColorOptions,
    DrawSectionOptions,
    LineThicknessOptions,
    NumberSegmentsOptions,
    OpacityOptions,
    RayTraceOptions,
    RealPupilOptions,
)

__all__ = (
    "BackgroundOptions",
    "BrightnessOptions",
    "CameraViewpointOptions",
    "ColorRaysByCrossSectionOptions",
    "ColorRaysByNSCOptions",
    "ColorRaysByOptions",
    "DetectorDisplayModeOptions",
    "DetectorPixelColorOptions",
    "DrawSectionOptions",
    "I3DViewerExport",
    "ICrossSectionExport",
    "IImageExportData",
    "IImagePixel",
    "INSC3DLayoutExport",
    "INSCShadedModelExport",
    "IShadedModelExport",
    "LineThicknessOptions",
    "NumberSegmentsOptions",
    "OpacityOptions",
    "RayTraceOptions",
    "RealPupilOptions",
)

# BackgroundOptions is imported as constant

# BrightnessOptions is imported as constant

# CameraViewpointOptions is imported as constant

# ColorRaysByCrossSectionOptions is imported as constant

# ColorRaysByNSCOptions is imported as constant

# ColorRaysByOptions is imported as constant

# DetectorDisplayModeOptions is imported as constant

# DetectorPixelColorOptions is imported as constant

# DrawSectionOptions is imported as constant

class I3DViewerExport(ISystemTool):
    @property
    def SaveImageAsFile(self) -> bool: ...
    @SaveImageAsFile.setter
    def SaveImageAsFile(self, value: bool) -> None: ...
    @property
    def OutputFileName(self) -> str: ...
    @OutputFileName.setter
    def OutputFileName(self, value: str) -> None: ...
    @property
    def IsValidFileName(self) -> bool: ...
    @property
    def OutputPixelWidth(self) -> int: ...
    @OutputPixelWidth.setter
    def OutputPixelWidth(self, value: int) -> None: ...
    @property
    def OutputPixelHeight(self) -> int: ...
    @OutputPixelHeight.setter
    def OutputPixelHeight(self, value: int) -> None: ...
    @property
    def StartSurface(self) -> int: ...
    @StartSurface.setter
    def StartSurface(self, value: int) -> None: ...
    @property
    def EndSurface(self) -> int: ...
    @EndSurface.setter
    def EndSurface(self, value: int) -> None: ...
    @property
    def NumberOfRays(self) -> int: ...
    @NumberOfRays.setter
    def NumberOfRays(self, value: int) -> None: ...
    @property
    def Wavelength(self) -> int: ...
    @Wavelength.setter
    def Wavelength(self, value: int) -> None: ...
    @property
    def Field(self) -> int: ...
    @Field.setter
    def Field(self, value: int) -> None: ...
    @property
    def RayPattern(self) -> RayPatternType: ...
    @RayPattern.setter
    def RayPattern(self, value: RayPatternType) -> None: ...
    @property
    def ColorRaysBy(self) -> ColorRaysByOptions: ...
    @ColorRaysBy.setter
    def ColorRaysBy(self, value: ColorRaysByOptions) -> None: ...
    @property
    def DeleteVignetted(self) -> bool: ...
    @DeleteVignetted.setter
    def DeleteVignetted(self, value: bool) -> None: ...
    @property
    def HideLensFaces(self) -> bool: ...
    @HideLensFaces.setter
    def HideLensFaces(self, value: bool) -> None: ...
    @property
    def HideLensEdges(self) -> bool: ...
    @HideLensEdges.setter
    def HideLensEdges(self, value: bool) -> None: ...
    @property
    def HideXBars(self) -> bool: ...
    @HideXBars.setter
    def HideXBars(self, value: bool) -> None: ...
    @property
    def DrawParaxialPupils(self) -> bool: ...
    @DrawParaxialPupils.setter
    def DrawParaxialPupils(self, value: bool) -> None: ...
    @property
    def FletchRays(self) -> bool: ...
    @FletchRays.setter
    def FletchRays(self, value: bool) -> None: ...
    @property
    def SplitNSCRays(self) -> bool: ...
    @SplitNSCRays.setter
    def SplitNSCRays(self, value: bool) -> None: ...
    @property
    def ScatterNSCRays(self) -> bool: ...
    @ScatterNSCRays.setter
    def ScatterNSCRays(self, value: bool) -> None: ...
    @property
    def DrawRealEntrancePupils(self) -> RealPupilOptions: ...
    @DrawRealEntrancePupils.setter
    def DrawRealEntrancePupils(self, value: RealPupilOptions) -> None: ...
    @property
    def DrawRealExitPupils(self) -> RealPupilOptions: ...
    @DrawRealExitPupils.setter
    def DrawRealExitPupils(self, value: RealPupilOptions) -> None: ...
    @property
    def SurfaceLineThickness(self) -> LineThicknessOptions: ...
    @SurfaceLineThickness.setter
    def SurfaceLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def RaysLineThickness(self) -> LineThicknessOptions: ...
    @RaysLineThickness.setter
    def RaysLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def ConfigurationAll(self) -> bool: ...
    @ConfigurationAll.setter
    def ConfigurationAll(self, value: bool) -> None: ...
    @property
    def ConfigurationCurrent(self) -> bool: ...
    @ConfigurationCurrent.setter
    def ConfigurationCurrent(self, value: bool) -> None: ...
    @property
    def ConfigurationOffsetX(self) -> float: ...
    @ConfigurationOffsetX.setter
    def ConfigurationOffsetX(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetY(self) -> float: ...
    @ConfigurationOffsetY.setter
    def ConfigurationOffsetY(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetZ(self) -> float: ...
    @ConfigurationOffsetZ.setter
    def ConfigurationOffsetZ(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleX(self) -> float: ...
    @CameraViewpointAngleX.setter
    def CameraViewpointAngleX(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleY(self) -> float: ...
    @CameraViewpointAngleY.setter
    def CameraViewpointAngleY(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleZ(self) -> float: ...
    @CameraViewpointAngleZ.setter
    def CameraViewpointAngleZ(self, value: float) -> None: ...
    @property
    def ImageExportData(self) -> IImageExportData: ...
    def SetCameraViewpoint(self, cameraViewpoint: CameraViewpointOptions) -> None: ...
    def SetConfigurationEnabled(self, config: int, enabled: bool) -> None: ...

class ICrossSectionExport(ISystemTool):
    @property
    def SaveImageAsFile(self) -> bool: ...
    @SaveImageAsFile.setter
    def SaveImageAsFile(self, value: bool) -> None: ...
    @property
    def OutputFileName(self) -> str: ...
    @OutputFileName.setter
    def OutputFileName(self, value: str) -> None: ...
    @property
    def IsValidFileName(self) -> bool: ...
    @property
    def OutputPixelWidth(self) -> int: ...
    @OutputPixelWidth.setter
    def OutputPixelWidth(self, value: int) -> None: ...
    @property
    def OutputPixelHeight(self) -> int: ...
    @OutputPixelHeight.setter
    def OutputPixelHeight(self, value: int) -> None: ...
    @property
    def StartSurface(self) -> int: ...
    @StartSurface.setter
    def StartSurface(self, value: int) -> None: ...
    @property
    def EndSurface(self) -> int: ...
    @EndSurface.setter
    def EndSurface(self, value: int) -> None: ...
    @property
    def NumberOfRays(self) -> int: ...
    @NumberOfRays.setter
    def NumberOfRays(self, value: int) -> None: ...
    @property
    def YStretch(self) -> float: ...
    @YStretch.setter
    def YStretch(self, value: float) -> None: ...
    @property
    def Wavelength(self) -> int: ...
    @Wavelength.setter
    def Wavelength(self, value: int) -> None: ...
    @property
    def Field(self) -> int: ...
    @Field.setter
    def Field(self, value: int) -> None: ...
    @property
    def ColorRaysBy(self) -> ColorRaysByCrossSectionOptions: ...
    @ColorRaysBy.setter
    def ColorRaysBy(self, value: ColorRaysByCrossSectionOptions) -> None: ...
    @property
    def UpperPupil(self) -> float: ...
    @UpperPupil.setter
    def UpperPupil(self, value: float) -> None: ...
    @property
    def LowerPupil(self) -> float: ...
    @LowerPupil.setter
    def LowerPupil(self, value: float) -> None: ...
    @property
    def FletchRays(self) -> bool: ...
    @FletchRays.setter
    def FletchRays(self, value: bool) -> None: ...
    @property
    def DeleteVignetted(self) -> bool: ...
    @DeleteVignetted.setter
    def DeleteVignetted(self, value: bool) -> None: ...
    @property
    def MarginalAndChiefRayOnly(self) -> bool: ...
    @MarginalAndChiefRayOnly.setter
    def MarginalAndChiefRayOnly(self, value: bool) -> None: ...
    @property
    def SurfaceLineThickness(self) -> LineThicknessOptions: ...
    @SurfaceLineThickness.setter
    def SurfaceLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def RaysLineThickness(self) -> LineThicknessOptions: ...
    @RaysLineThickness.setter
    def RaysLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def Configuration(self) -> int: ...
    @Configuration.setter
    def Configuration(self, value: int) -> None: ...
    @property
    def ImageExportData(self) -> IImageExportData: ...
    def SetFieldsAll(self) -> None: ...
    def SetWavelengthsAll(self) -> None: ...

class IImageExportData:
    @property
    def Width(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def Values(self) -> list[list[IImagePixel]]: ...
    def FillValues(self, fullSize: int) -> tuple[list[int], list[int], list[int]]: ...
    @overload
    def GetImagePixel(self, index: int) -> IImagePixel: ...
    @overload
    def GetImagePixel(self, x: int, y: int) -> IImagePixel: ...

class IImagePixel:
    @property
    def R(self) -> int: ...
    @property
    def G(self) -> int: ...
    @property
    def B(self) -> int: ...

class INSC3DLayoutExport(ISystemTool):
    @property
    def SaveImageAsFile(self) -> bool: ...
    @SaveImageAsFile.setter
    def SaveImageAsFile(self, value: bool) -> None: ...
    @property
    def OutputFileName(self) -> str: ...
    @OutputFileName.setter
    def OutputFileName(self, value: str) -> None: ...
    @property
    def IsValidFileName(self) -> bool: ...
    @property
    def OutputPixelWidth(self) -> int: ...
    @OutputPixelWidth.setter
    def OutputPixelWidth(self, value: int) -> None: ...
    @property
    def OutputPixelHeight(self) -> int: ...
    @OutputPixelHeight.setter
    def OutputPixelHeight(self, value: int) -> None: ...
    @property
    def RayDatabase(self) -> str: ...
    @RayDatabase.setter
    def RayDatabase(self, value: str) -> None: ...
    @property
    def Filter(self) -> str: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @property
    def RayTrace(self) -> RayTraceOptions: ...
    @RayTrace.setter
    def RayTrace(self, value: RayTraceOptions) -> None: ...
    @property
    def ColorRaysBy(self) -> ColorRaysByNSCOptions: ...
    @ColorRaysBy.setter
    def ColorRaysBy(self, value: ColorRaysByNSCOptions) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def FletchRays(self) -> bool: ...
    @FletchRays.setter
    def FletchRays(self, value: bool) -> None: ...
    @property
    def SplitNSCRays(self) -> bool: ...
    @SplitNSCRays.setter
    def SplitNSCRays(self, value: bool) -> None: ...
    @property
    def ScatterNSCRays(self) -> bool: ...
    @ScatterNSCRays.setter
    def ScatterNSCRays(self, value: bool) -> None: ...
    @property
    def SurfaceLineThickness(self) -> LineThicknessOptions: ...
    @SurfaceLineThickness.setter
    def SurfaceLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def RaysLineThickness(self) -> LineThicknessOptions: ...
    @RaysLineThickness.setter
    def RaysLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def ConfigurationAll(self) -> bool: ...
    @ConfigurationAll.setter
    def ConfigurationAll(self, value: bool) -> None: ...
    @property
    def ConfigurationCurrent(self) -> bool: ...
    @ConfigurationCurrent.setter
    def ConfigurationCurrent(self, value: bool) -> None: ...
    @property
    def ConfigurationOffsetX(self) -> float: ...
    @ConfigurationOffsetX.setter
    def ConfigurationOffsetX(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetY(self) -> float: ...
    @ConfigurationOffsetY.setter
    def ConfigurationOffsetY(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetZ(self) -> float: ...
    @ConfigurationOffsetZ.setter
    def ConfigurationOffsetZ(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleX(self) -> float: ...
    @CameraViewpointAngleX.setter
    def CameraViewpointAngleX(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleY(self) -> float: ...
    @CameraViewpointAngleY.setter
    def CameraViewpointAngleY(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleZ(self) -> float: ...
    @CameraViewpointAngleZ.setter
    def CameraViewpointAngleZ(self, value: float) -> None: ...
    @property
    def ImageExportData(self) -> IImageExportData: ...
    def SetCameraViewpoint(self, cameraViewpoint: CameraViewpointOptions) -> None: ...
    def SetConfigurationEnabled(self, config: int, enabled: bool) -> None: ...

class INSCShadedModelExport(ISystemTool):
    @property
    def SaveImageAsFile(self) -> bool: ...
    @SaveImageAsFile.setter
    def SaveImageAsFile(self, value: bool) -> None: ...
    @property
    def OutputFileName(self) -> str: ...
    @OutputFileName.setter
    def OutputFileName(self, value: str) -> None: ...
    @property
    def IsValidFileName(self) -> bool: ...
    @property
    def OutputPixelWidth(self) -> int: ...
    @OutputPixelWidth.setter
    def OutputPixelWidth(self, value: int) -> None: ...
    @property
    def OutputPixelHeight(self) -> int: ...
    @OutputPixelHeight.setter
    def OutputPixelHeight(self, value: int) -> None: ...
    @property
    def RayDatabase(self) -> str: ...
    @RayDatabase.setter
    def RayDatabase(self, value: str) -> None: ...
    @property
    def Filter(self) -> str: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @property
    def RayTrace(self) -> RayTraceOptions: ...
    @RayTrace.setter
    def RayTrace(self, value: RayTraceOptions) -> None: ...
    @property
    def ColorRaysBy(self) -> ColorRaysByNSCOptions: ...
    @ColorRaysBy.setter
    def ColorRaysBy(self, value: ColorRaysByNSCOptions) -> None: ...
    @property
    def DetectorPixelColorMode(self) -> DetectorPixelColorOptions: ...
    @DetectorPixelColorMode.setter
    def DetectorPixelColorMode(self, value: DetectorPixelColorOptions) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def FletchRays(self) -> bool: ...
    @FletchRays.setter
    def FletchRays(self, value: bool) -> None: ...
    @property
    def SplitNSCRays(self) -> bool: ...
    @SplitNSCRays.setter
    def SplitNSCRays(self, value: bool) -> None: ...
    @property
    def ScatterNSCRays(self) -> bool: ...
    @ScatterNSCRays.setter
    def ScatterNSCRays(self, value: bool) -> None: ...
    @property
    def SurfaceLineThickness(self) -> LineThicknessOptions: ...
    @SurfaceLineThickness.setter
    def SurfaceLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def RaysLineThickness(self) -> LineThicknessOptions: ...
    @RaysLineThickness.setter
    def RaysLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def ConfigurationAll(self) -> bool: ...
    @ConfigurationAll.setter
    def ConfigurationAll(self, value: bool) -> None: ...
    @property
    def ConfigurationCurrent(self) -> bool: ...
    @ConfigurationCurrent.setter
    def ConfigurationCurrent(self, value: bool) -> None: ...
    @property
    def ConfigurationOffsetX(self) -> float: ...
    @ConfigurationOffsetX.setter
    def ConfigurationOffsetX(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetY(self) -> float: ...
    @ConfigurationOffsetY.setter
    def ConfigurationOffsetY(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetZ(self) -> float: ...
    @ConfigurationOffsetZ.setter
    def ConfigurationOffsetZ(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleX(self) -> float: ...
    @CameraViewpointAngleX.setter
    def CameraViewpointAngleX(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleY(self) -> float: ...
    @CameraViewpointAngleY.setter
    def CameraViewpointAngleY(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleZ(self) -> float: ...
    @CameraViewpointAngleZ.setter
    def CameraViewpointAngleZ(self, value: float) -> None: ...
    @property
    def ImageExportData(self) -> IImageExportData: ...
    @property
    def DetectorDisplayMode(self) -> DetectorDisplayModeOptions: ...
    @DetectorDisplayMode.setter
    def DetectorDisplayMode(self, value: DetectorDisplayModeOptions) -> None: ...
    @property
    def Opacity(self) -> OpacityOptions: ...
    @Opacity.setter
    def Opacity(self, value: OpacityOptions) -> None: ...
    @property
    def Background(self) -> BackgroundOptions: ...
    @Background.setter
    def Background(self, value: BackgroundOptions) -> None: ...
    @property
    def Brightness(self) -> BrightnessOptions: ...
    @Brightness.setter
    def Brightness(self, value: BrightnessOptions) -> None: ...
    def SetCameraViewpoint(self, cameraViewpoint: CameraViewpointOptions) -> None: ...
    def SetConfigurationEnabled(self, config: int, enabled: bool) -> None: ...

class IShadedModelExport(ISystemTool):
    @property
    def SaveImageAsFile(self) -> bool: ...
    @SaveImageAsFile.setter
    def SaveImageAsFile(self, value: bool) -> None: ...
    @property
    def OutputFileName(self) -> str: ...
    @OutputFileName.setter
    def OutputFileName(self, value: str) -> None: ...
    @property
    def IsValidFileName(self) -> bool: ...
    @property
    def OutputPixelWidth(self) -> int: ...
    @OutputPixelWidth.setter
    def OutputPixelWidth(self, value: int) -> None: ...
    @property
    def OutputPixelHeight(self) -> int: ...
    @OutputPixelHeight.setter
    def OutputPixelHeight(self, value: int) -> None: ...
    @property
    def StartSurface(self) -> int: ...
    @StartSurface.setter
    def StartSurface(self, value: int) -> None: ...
    @property
    def EndSurface(self) -> int: ...
    @EndSurface.setter
    def EndSurface(self, value: int) -> None: ...
    @property
    def NumberOfRays(self) -> int: ...
    @NumberOfRays.setter
    def NumberOfRays(self, value: int) -> None: ...
    @property
    def ColorRaysBy(self) -> ColorRaysByOptions: ...
    @ColorRaysBy.setter
    def ColorRaysBy(self, value: ColorRaysByOptions) -> None: ...
    @property
    def RayPattern(self) -> RayPatternType: ...
    @RayPattern.setter
    def RayPattern(self, value: RayPatternType) -> None: ...
    @property
    def Wavelength(self) -> int: ...
    @Wavelength.setter
    def Wavelength(self, value: int) -> None: ...
    @property
    def Field(self) -> int: ...
    @Field.setter
    def Field(self, value: int) -> None: ...
    @property
    def Opacity(self) -> OpacityOptions: ...
    @Opacity.setter
    def Opacity(self, value: OpacityOptions) -> None: ...
    @property
    def Background(self) -> BackgroundOptions: ...
    @Background.setter
    def Background(self, value: BackgroundOptions) -> None: ...
    @property
    def Brightness(self) -> BrightnessOptions: ...
    @Brightness.setter
    def Brightness(self, value: BrightnessOptions) -> None: ...
    @property
    def AngularSegments(self) -> NumberSegmentsOptions: ...
    @AngularSegments.setter
    def AngularSegments(self, value: NumberSegmentsOptions) -> None: ...
    @property
    def RadialSegments(self) -> NumberSegmentsOptions: ...
    @RadialSegments.setter
    def RadialSegments(self, value: NumberSegmentsOptions) -> None: ...
    @property
    def FletchRays(self) -> bool: ...
    @FletchRays.setter
    def FletchRays(self, value: bool) -> None: ...
    @property
    def DeleteVignetted(self) -> bool: ...
    @DeleteVignetted.setter
    def DeleteVignetted(self, value: bool) -> None: ...
    @property
    def SplitNSCRays(self) -> bool: ...
    @SplitNSCRays.setter
    def SplitNSCRays(self, value: bool) -> None: ...
    @property
    def ScatterNSCRays(self) -> bool: ...
    @ScatterNSCRays.setter
    def ScatterNSCRays(self, value: bool) -> None: ...
    @property
    def SurfaceLineThickness(self) -> LineThicknessOptions: ...
    @SurfaceLineThickness.setter
    def SurfaceLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def RaysLineThickness(self) -> LineThicknessOptions: ...
    @RaysLineThickness.setter
    def RaysLineThickness(self, value: LineThicknessOptions) -> None: ...
    @property
    def ImageExportData(self) -> IImageExportData: ...
    @property
    def ConfigurationAll(self) -> bool: ...
    @ConfigurationAll.setter
    def ConfigurationAll(self, value: bool) -> None: ...
    @property
    def ConfigurationCurrent(self) -> bool: ...
    @ConfigurationCurrent.setter
    def ConfigurationCurrent(self, value: bool) -> None: ...
    @property
    def ConfigurationOffsetX(self) -> float: ...
    @ConfigurationOffsetX.setter
    def ConfigurationOffsetX(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetY(self) -> float: ...
    @ConfigurationOffsetY.setter
    def ConfigurationOffsetY(self, value: float) -> None: ...
    @property
    def ConfigurationOffsetZ(self) -> float: ...
    @ConfigurationOffsetZ.setter
    def ConfigurationOffsetZ(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleX(self) -> float: ...
    @CameraViewpointAngleX.setter
    def CameraViewpointAngleX(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleY(self) -> float: ...
    @CameraViewpointAngleY.setter
    def CameraViewpointAngleY(self, value: float) -> None: ...
    @property
    def CameraViewpointAngleZ(self) -> float: ...
    @CameraViewpointAngleZ.setter
    def CameraViewpointAngleZ(self, value: float) -> None: ...
    @property
    def DrawSection(self) -> DrawSectionOptions: ...
    @DrawSection.setter
    def DrawSection(self, value: DrawSectionOptions) -> None: ...
    def SetCameraViewpoint(self, cameraViewpoint: CameraViewpointOptions) -> None: ...
    def SetConfigurationEnabled(self, config: int, enabled: bool) -> None: ...
    def SetFieldsAll(self) -> None: ...
    def SetWavelengthsAll(self) -> None: ...

# LineThicknessOptions is imported as constant

# NumberSegmentsOptions is imported as constant

# OpacityOptions is imported as constant

# RayTraceOptions is imported as constant

# RealPupilOptions is imported as constant
