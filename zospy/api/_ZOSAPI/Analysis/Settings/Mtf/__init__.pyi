"""This file provides autocompletions for the ZOS-API and was automatically generated.
It should not be edited manually.
"""

from __future__ import annotations

from typing import Iterable, overload

from zospy.api._ZOSAPI.Analysis import (
    HuygensSurfaceMftShowAsTypes,
    SampleSizes,
    SampleSizes_ContrastLoss,
    ShowAs,
)
from zospy.api._ZOSAPI.Analysis.Settings import IAS_, Rotations, ScanTypes

__all__ = (
    "HuygensMtfTypes",
    "IAS_ContrastLossMap",
    "IAS_FftMtf",
    "IAS_FftMtfMap",
    "IAS_FftMtfvsField",
    "IAS_FftSurfaceMtf",
    "IAS_FftThroughFocusMtf",
    "IAS_GeometricMtf",
    "IAS_GeometricMtfMap",
    "IAS_GeometricMtfvsField",
    "IAS_GeometricThroughFocusMtf",
    "IAS_HuygensMtf",
    "IAS_HuygensMtfvsField",
    "IAS_HuygensSurfaceMtf",
    "IAS_HuygensThroughFocusMtf",
    "IAS_NSCGeometricMtf",
    "MtfDataTypes",
    "MtfTypes",
    "ShowAsTypes",
    "SurfaceMtfTypes",
)

class HuygensMtfTypes:
    Modulation = 0

class IAS_ContrastLossMap(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes_ContrastLoss: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes_ContrastLoss) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def Normalize(self) -> bool: ...
    @Normalize.setter
    def Normalize(self, value: bool) -> None: ...
    @property
    def ShowOPD(self) -> bool: ...
    @ShowOPD.setter
    def ShowOPD(self, value: bool) -> None: ...

class IAS_FftMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Surface(self) -> IAS_Surface: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def Type(self) -> MtfTypes: ...
    @Type.setter
    def Type(self, value: MtfTypes) -> None: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ShowDiffractionLimit(self) -> bool: ...
    @ShowDiffractionLimit.setter
    def ShowDiffractionLimit(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def MaximumFrequency(self) -> float: ...
    @MaximumFrequency.setter
    def MaximumFrequency(self, value: float) -> None: ...

class IAS_FftMtfMap(IAS_):
    @property
    def ReferenceField(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def MTF_DataType(self) -> MtfDataTypes: ...
    @MTF_DataType.setter
    def MTF_DataType(self, value: MtfDataTypes) -> None: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ShowAs(self) -> ShowAsTypes: ...
    @ShowAs.setter
    def ShowAs(self, value: ShowAsTypes) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def RemoveVignetting(self) -> bool: ...
    @RemoveVignetting.setter
    def RemoveVignetting(self, value: bool) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def X_Field_Width(self) -> float: ...
    @X_Field_Width.setter
    def X_Field_Width(self, value: float) -> None: ...
    @property
    def Y_Field_Width(self) -> float: ...
    @Y_Field_Width.setter
    def Y_Field_Width(self, value: float) -> None: ...
    @property
    def X_Pixels(self) -> int: ...
    @X_Pixels.setter
    def X_Pixels(self, value: int) -> None: ...
    @property
    def Y_Pixels(self) -> int: ...
    @Y_Pixels.setter
    def Y_Pixels(self, value: int) -> None: ...

class IAS_FftMtfvsField(IAS_):
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ScanType(self) -> ScanTypes: ...
    @ScanType.setter
    def ScanType(self, value: ScanTypes) -> None: ...
    @property
    def RemoveVignetting(self) -> bool: ...
    @RemoveVignetting.setter
    def RemoveVignetting(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def Freq_1(self) -> float: ...
    @Freq_1.setter
    def Freq_1(self, value: float) -> None: ...
    @property
    def Freq_2(self) -> float: ...
    @Freq_2.setter
    def Freq_2(self, value: float) -> None: ...
    @property
    def Freq_3(self) -> float: ...
    @Freq_3.setter
    def Freq_3(self, value: float) -> None: ...
    @property
    def Freq_4(self) -> float: ...
    @Freq_4.setter
    def Freq_4(self, value: float) -> None: ...
    @property
    def Freq_5(self) -> float: ...
    @Freq_5.setter
    def Freq_5(self, value: float) -> None: ...
    @property
    def Freq_6(self) -> float: ...
    @Freq_6.setter
    def Freq_6(self, value: float) -> None: ...
    @property
    def FieldDensity(self) -> int: ...
    @FieldDensity.setter
    def FieldDensity(self, value: int) -> None: ...

class IAS_FftSurfaceMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def Type(self) -> SurfaceMtfTypes: ...
    @Type.setter
    def Type(self, value: SurfaceMtfTypes) -> None: ...
    @property
    def Rotation(self) -> Rotations: ...
    @Rotation.setter
    def Rotation(self, value: Rotations) -> None: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ShowAs(self) -> ShowAs: ...
    @ShowAs.setter
    def ShowAs(self, value: ShowAs) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def ScaleFactor(self) -> float: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value: float) -> None: ...

class IAS_FftThroughFocusMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def Type(self) -> MtfTypes: ...
    @Type.setter
    def Type(self, value: MtfTypes) -> None: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def DeltaFocus(self) -> float: ...
    @DeltaFocus.setter
    def DeltaFocus(self, value: float) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def NumberOfSteps(self) -> int: ...
    @NumberOfSteps.setter
    def NumberOfSteps(self, value: int) -> None: ...

class IAS_GeometricMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def MultiplyByDiffractionLimit(self) -> bool: ...
    @MultiplyByDiffractionLimit.setter
    def MultiplyByDiffractionLimit(self, value: bool) -> None: ...
    @property
    def ScatterRays(self) -> bool: ...
    @ScatterRays.setter
    def ScatterRays(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def MaximumFrequency(self) -> float: ...
    @MaximumFrequency.setter
    def MaximumFrequency(self, value: float) -> None: ...

class IAS_GeometricMtfMap(IAS_):
    @property
    def ReferenceField(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def MTF_DataType(self) -> MtfDataTypes: ...
    @MTF_DataType.setter
    def MTF_DataType(self, value: MtfDataTypes) -> None: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ShowAs(self) -> ShowAsTypes: ...
    @ShowAs.setter
    def ShowAs(self, value: ShowAsTypes) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def ScatterRays(self) -> bool: ...
    @ScatterRays.setter
    def ScatterRays(self, value: bool) -> None: ...
    @property
    def RemoveVignetting(self) -> bool: ...
    @RemoveVignetting.setter
    def RemoveVignetting(self, value: bool) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def X_Field_Width(self) -> float: ...
    @X_Field_Width.setter
    def X_Field_Width(self, value: float) -> None: ...
    @property
    def Y_Field_Width(self) -> float: ...
    @Y_Field_Width.setter
    def Y_Field_Width(self, value: float) -> None: ...
    @property
    def X_Pixels(self) -> int: ...
    @X_Pixels.setter
    def X_Pixels(self, value: int) -> None: ...
    @property
    def Y_Pixels(self) -> int: ...
    @Y_Pixels.setter
    def Y_Pixels(self, value: int) -> None: ...

class IAS_GeometricMtfvsField(IAS_):
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ScanType(self) -> ScanTypes: ...
    @ScanType.setter
    def ScanType(self, value: ScanTypes) -> None: ...
    @property
    def MultiplyByDiffractionLimit(self) -> bool: ...
    @MultiplyByDiffractionLimit.setter
    def MultiplyByDiffractionLimit(self, value: bool) -> None: ...
    @property
    def ScatterRays(self) -> bool: ...
    @ScatterRays.setter
    def ScatterRays(self, value: bool) -> None: ...
    @property
    def RemoveVignetting(self) -> bool: ...
    @RemoveVignetting.setter
    def RemoveVignetting(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def Freq_1(self) -> float: ...
    @Freq_1.setter
    def Freq_1(self, value: float) -> None: ...
    @property
    def Freq_2(self) -> float: ...
    @Freq_2.setter
    def Freq_2(self, value: float) -> None: ...
    @property
    def Freq_3(self) -> float: ...
    @Freq_3.setter
    def Freq_3(self, value: float) -> None: ...
    @property
    def Freq_4(self) -> float: ...
    @Freq_4.setter
    def Freq_4(self, value: float) -> None: ...
    @property
    def Freq_5(self) -> float: ...
    @Freq_5.setter
    def Freq_5(self, value: float) -> None: ...
    @property
    def Freq_6(self) -> float: ...
    @Freq_6.setter
    def Freq_6(self, value: float) -> None: ...
    @property
    def FieldDensity(self) -> int: ...
    @FieldDensity.setter
    def FieldDensity(self, value: int) -> None: ...

class IAS_GeometricThroughFocusMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def MultiplyByDiffractionLimit(self) -> bool: ...
    @MultiplyByDiffractionLimit.setter
    def MultiplyByDiffractionLimit(self, value: bool) -> None: ...
    @property
    def ScatterRays(self) -> bool: ...
    @ScatterRays.setter
    def ScatterRays(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def DeltaFocus(self) -> float: ...
    @DeltaFocus.setter
    def DeltaFocus(self, value: float) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def NumberOfSteps(self) -> int: ...
    @NumberOfSteps.setter
    def NumberOfSteps(self, value: int) -> None: ...

class IAS_HuygensMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def ImageSampleSize(self) -> SampleSizes: ...
    @ImageSampleSize.setter
    def ImageSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def PupilSampleSize(self) -> SampleSizes: ...
    @PupilSampleSize.setter
    def PupilSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def Type(self) -> HuygensMtfTypes: ...
    @Type.setter
    def Type(self, value: HuygensMtfTypes) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def ImageDelta(self) -> float: ...
    @ImageDelta.setter
    def ImageDelta(self, value: float) -> None: ...
    @property
    def MaximumFrequency(self) -> float: ...
    @MaximumFrequency.setter
    def MaximumFrequency(self, value: float) -> None: ...
    @property
    def Configuration(self) -> int: ...
    @Configuration.setter
    def Configuration(self, value: int) -> None: ...

class IAS_HuygensMtfvsField(IAS_):
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def SampleSize(self) -> SampleSizes: ...
    @SampleSize.setter
    def SampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ScanType(self) -> ScanTypes: ...
    @ScanType.setter
    def ScanType(self, value: ScanTypes) -> None: ...
    @property
    def RemoveVignetting(self) -> bool: ...
    @RemoveVignetting.setter
    def RemoveVignetting(self, value: bool) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def Freq_1(self) -> float: ...
    @Freq_1.setter
    def Freq_1(self, value: float) -> None: ...
    @property
    def Freq_2(self) -> float: ...
    @Freq_2.setter
    def Freq_2(self, value: float) -> None: ...
    @property
    def Freq_3(self) -> float: ...
    @Freq_3.setter
    def Freq_3(self, value: float) -> None: ...
    @property
    def Freq_4(self) -> float: ...
    @Freq_4.setter
    def Freq_4(self, value: float) -> None: ...
    @property
    def Freq_5(self) -> float: ...
    @Freq_5.setter
    def Freq_5(self, value: float) -> None: ...
    @property
    def Freq_6(self) -> float: ...
    @Freq_6.setter
    def Freq_6(self, value: float) -> None: ...
    @property
    def FieldDensity(self) -> int: ...
    @FieldDensity.setter
    def FieldDensity(self, value: int) -> None: ...
    @property
    def ImageDelta(self) -> float: ...
    @ImageDelta.setter
    def ImageDelta(self, value: float) -> None: ...

class IAS_HuygensSurfaceMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def ImageSampleSize(self) -> SampleSizes: ...
    @ImageSampleSize.setter
    def ImageSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def PupilSampleSize(self) -> SampleSizes: ...
    @PupilSampleSize.setter
    def PupilSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def ShowAs(self) -> HuygensSurfaceMftShowAsTypes: ...
    @ShowAs.setter
    def ShowAs(self, value: HuygensSurfaceMftShowAsTypes) -> None: ...
    @property
    def Type(self) -> SurfaceMtfTypes: ...
    @Type.setter
    def Type(self, value: SurfaceMtfTypes) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def ImageDelta(self) -> float: ...
    @ImageDelta.setter
    def ImageDelta(self, value: float) -> None: ...
    @property
    def Configuration(self) -> int: ...
    @Configuration.setter
    def Configuration(self, value: int) -> None: ...

class IAS_HuygensThroughFocusMtf(IAS_):
    @property
    def Field(self) -> IAS_Field: ...
    @property
    def Wavelength(self) -> IAS_Wavelength: ...
    @property
    def ImageSampleSize(self) -> SampleSizes: ...
    @ImageSampleSize.setter
    def ImageSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def PupilSampleSize(self) -> SampleSizes: ...
    @PupilSampleSize.setter
    def PupilSampleSize(self, value: SampleSizes) -> None: ...
    @property
    def Type(self) -> HuygensMtfTypes: ...
    @Type.setter
    def Type(self, value: HuygensMtfTypes) -> None: ...
    @property
    def UseDashes(self) -> bool: ...
    @UseDashes.setter
    def UseDashes(self, value: bool) -> None: ...
    @property
    def UsePolarization(self) -> bool: ...
    @UsePolarization.setter
    def UsePolarization(self, value: bool) -> None: ...
    @property
    def DeltaFocus(self) -> float: ...
    @DeltaFocus.setter
    def DeltaFocus(self, value: float) -> None: ...
    @property
    def ImageDelta(self) -> float: ...
    @ImageDelta.setter
    def ImageDelta(self, value: float) -> None: ...
    @property
    def Frequency(self) -> float: ...
    @Frequency.setter
    def Frequency(self, value: float) -> None: ...
    @property
    def Configuration(self) -> int: ...
    @Configuration.setter
    def Configuration(self, value: int) -> None: ...
    @property
    def NumberOfSteps(self) -> int: ...
    @NumberOfSteps.setter
    def NumberOfSteps(self, value: int) -> None: ...

class IAS_NSCGeometricMtf(IAS_):
    @property
    def Detector(self) -> IAS_Detector: ...
    @property
    def RayDatabaseFilename(self) -> str: ...
    @RayDatabaseFilename.setter
    def RayDatabaseFilename(self, value: str) -> None: ...
    @property
    def Filter(self) -> str: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @property
    def MaximumFrequency(self) -> float: ...
    @MaximumFrequency.setter
    def MaximumFrequency(self, value: float) -> None: ...
    @property
    def MinimumPlotScale(self) -> float: ...
    @MinimumPlotScale.setter
    def MinimumPlotScale(self, value: float) -> None: ...
    @property
    def MaximumPlotScale(self) -> float: ...
    @MaximumPlotScale.setter
    def MaximumPlotScale(self, value: float) -> None: ...

class MtfDataTypes:
    Average = 0
    Tangential = 1
    Sagittal = 2

class MtfTypes:
    Modulation = 0
    Real = 1
    Imaginary = 2
    Phase = 3
    SquareWave = 4

class ShowAsTypes:
    GreyScale = 0
    GreyScaleInverted = 1
    FalseColor = 2
    FalseColorInverted = 3

class SurfaceMtfTypes:
    MTF_Incoherent = 0
    Real_Incoherent = 1
    Imaginary_Incoherent = 2
    MTF_Coherent = 3
    Real_Coherent = 4
    Imaginary_Coherent = 5
